#+TITLE: rfnash's Emacs configuration
#+OPTIONS: toc:4 h:4
* About this file
<<babel-init>>
TODO: write something about this file.
* From [[https://github.com/dimitri/emacs-kicker][Emacs Kicker]]
Visual Settings
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
  (windmove-default-keybindings 'meta)
  (setq windmove-wrap-around t)
  (winner-mode 1)
  (global-auto-revert-mode 1)
  (require 'dired-x)
  (set-face-attribute 'default nil :family "Liberation Mono for Powerline" :height 120)

  (setq inhibit-splash-screen t)       ; no splash screen, thanks
  (line-number-mode t)                 ; have line numbers and
  (column-number-mode t)               ; column numbers in the mode line

  (tool-bar-mode -1)                   ; no tool bar with icons
  (scroll-bar-mode -1)                 ; no scroll bars
  (menu-bar-mode -1)                   ; no menu bar

  (global-hl-line-mode)                ; highlight current line


  ; (global-linum-mode 1)                ; add line numbers on the left
#+end_src
Use the clipboard, pretty please, so that copy/paste "works"
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
#+end_src
Navigate currently visible windows with M-<arrows>
#+begin_src emacs-lisp
  (windmove-default-keybindings 'meta)
  (setq windmove-wrap-around t)
#+end_src
winner-mode provides C-<left> to get back to previous window layout
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src
whenever an external process changes a file underneath emacs, and there
was no unsaved changes in the corresponding buffer, just revert its
content to reflect what's on-disk.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
C-x C-j opens dired with the cursor right on the file you're editing
#+begin_src emacs-lisp
  (require 'dired-x)
#+end_src
Set default font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Liberation Mono for Powerline" :height 120)
#+end_src
* Use-package
#+begin_src emacs-lisp
  (package-initialize nil)
  ;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-refresh-contents)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (unless (package-installed-p 'diminish)
    (package-install 'diminish))
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                     ; if you use :diminish
  (require 'bind-key)                     ; if you use any :bind variant
#+end_src
* Programming
** fill-column-indicator
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :commands fci-mode)
#+end_src
** srefactor
#+begin_src emacs-lisp
  (use-package srefactor
    :ensure t
    :commands srefactor-refactor-at-point
    :config
    (semantic-mode 1)
    (bind-key "M-RET" #'srefactor-refactor-at-point c-mode-map)
    (bind-key "M-RET" #'srefactor-refactor-at-point c++-mode-map))
  (use-package srefactor-lisp
    :bind (("M-RET o" . srefactor-lisp-one-line)
           ("M-RET m" . srefactor-lisp-format-sexp)
           ("M-RET d" . srefactor-lisp-format-defun)
           ("M-RET b" . srefactor-lisp-format-buffer))
    :commands (srefactor-lisp-one-line
               srefactor-lisp-format-sexp
               srefactor-lisp-format-defun
               srefactor-lisp-format-buffer))

#+end_src
** Paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode)
#+end_src
** paxedit-mode
   #+begin_src emacs-lisp
     (use-package paxedit
       :commands paxedit-mode
       :diminish paxedit-mode
       :load-path "~/.emacs.d/paxedit"       ; Won't install from package.el, cloned git repo instead
       :init
       (add-hook 'emacs-lisp-mode-hook 'paxedit-mode)
       (add-hook 'clojure-mode-hook 'paxedit-mode)
       (add-hook 'lisp-interaction-mode-hook 'paxedit-mode)
       (add-hook 'paxedit-mode-hook 'paredit-mode)
       :config
       (bind-key "M-<right>" #'paxedit-transpose-forward paxedit-mode-map)
       (bind-key "M-<left>" #'paxedit-transpose-backward paxedit-mode-map)
       (bind-key "M-<up>" #'paxedit-backward-up paxedit-mode-map)
       (bind-key "M-<down>" #'paxedit-backward-end paxedit-mode-map)
       (bind-key "M-b" #'paxedit-previous-symbol paxedit-mode-map)
       (bind-key "M-f" #'paxedit-next-symbol paxedit-mode-map)
       (bind-key "C-%" #'paxedit-copy paxedit-mode-map)
       (bind-key "C-&" #'paxedit-kill paxedit-mode-map)
       (bind-key "C-*" #'paxedit-delete paxedit-mode-map)
       (bind-key "C-^" #'paxedit-sexp-raise paxedit-mode-map)
       (bind-key "M-u" #'paxedit-symbol-change-case paxedit-mode-map)
       (bind-key "C-@" #'paxedit-symbol-copy paxedit-mode-map)
       (bind-key "C-#" #'paxedit-symbol-kill paxedit-mode-map))
   #+end_src
** indent-region
#+begin_src emacs-lisp
  (bind-key "C-c n" #'indent-region)
#+end_src
* Color Theme
#+begin_src emacs-lisp
  (disable-theme 'zenburn)
  (use-package color-theme
    :ensure t
    :config
    (use-package color-theme-solarized
      :ensure t
      :bind* ("C-x c t" . rfnash-helm-theme)
      :config
      (set-frame-parameter nil 'background-mode 'dark)
      (load-theme 'solarized t)

      (defun rfnash-solarized-light ()
        (interactive)
        (disable-theme 'zenburn)
        (set-frame-parameter nil 'background-mode 'light)
        (enable-theme 'solarized)
        (set-face-attribute 'org-scheduled-today nil :foreground "darkgreen" :weight 'normal :slant 'normal) ; orginal color
        (set-face-attribute 'org-warning nil :weight 'bold)
        (set-face-attribute 'org-todo nil :inherit 'org-todo))

      (defun rfnash-solarized-dark ()
        (interactive)
        (disable-theme 'zenburn)
        (set-frame-parameter nil 'background-mode 'dark)
        (enable-theme 'solarized)
        (set-face-attribute 'org-scheduled-today nil :foreground "#4df946" :weight 'normal :slant 'normal)
        (set-face-attribute 'org-warning nil :weight 'bold)
        ;; TODO: Doesn't show up while highlighted (point is on same line)
        (set-face-attribute 'org-todo nil :inverse-video t))

      (defun rfnash-zenburn ()
        (interactive)
        (disable-theme 'solarized)
        (enable-theme 'zenburn)
        ;; Colors from habit grid
        (set-face-attribute 'org-warning nil :foreground "firebrick" :weight 'bold)
        (set-face-attribute 'org-upcoming-deadline nil :foreground "darkgoldenrod"))

      (defun rfnash-helm-theme ()
        "helm interface to let my chose one of my customized themes"
        (interactive)
        (helm :sources `(
                         ((name . "My colorthemes")
                          (candidates . (("zenburn" . rfnash-zenburn)
                                         ("solarized-light" . rfnash-solarized-light)
                                         ("solarized-dark" . rfnash-solarized-dark)))
                          (action . (("Apply Theme" . (lambda (x) (apply x ())))))))))))
#+end_src
* Org Mode
** Org
#+begin_src emacs-lisp
  (use-package org
    :load-path "/usr/share/emacs/24.5/lisp/org/"
    :mode ("\\.org\\'" . org-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb)
           ("C-c F" . oog))
    :config
    (setq org-startup-folded t
          org-startup-indented t
          org-hide-leading-stars t
          org-log-done t
          org-log-into-drawer t
          org-return-follows-link t
          org-directory "~/Documents/OrgMode"
          org-default-notes-file (concat org-directory "/notes.org")
          org-return-follows-link t
          org-enforce-todo-dependencies t
          org-tags-exclude-from-inheritance '("project")
          org-columns-default-format "%40ITEM(Task) %TODO %3PRIORITY %TAGS %17Effort(Estimated Effort){:} %5CLOCKSUM")
    (setq org-stuck-projects '("+project/-DONE" ("TODO" "NEXT") nil "")))
#+end_src
** org-agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :config
    (setq org-agenda-columns-add-appointments-to-effort-sum t
        org-agenda-dim-blocked-tasks t
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-deadline-is-shown nil
        org-agenda-skip-scheduled-if-done t
        org-agenda-span 'day
        org-agenda-sticky t
        org-agenda-window-setup 'current-window)
  (setq org-sort-agenda-notime-is-late nil
        org-agenda-sorting-strategy
        '((agenda time-up habit-down timestamp-up priority-down category-keep)
          ;; (agenda time-up habit-down priority-down)
          (todo priority-down category-keep)
          (tags priority-down category-keep)
          (search category-keep)))
  (setq org-agenda-files
        (list org-directory
              (concat org-directory "/backlog")
              "~/Dropbox/notes"
              "~/Dropbox/Projects/learning.org"
              "~/.emacs.d/prelude/personal/rfnash/personal.org"
              "~/.emacs.d/rfnash.org"))
  (setq org-agenda-custom-commands
        '(("n" "Agenda and all NEXT actions"
           ((agenda "")
            (todo "NEXT" nil))
           ((org-agenda-regexp-filter-preset '("-SOMEDAY" "-TOODLDO"))))
          ("d" "Upcoming deadlines"
           agenda ""
           ((org-agenda-time-grid nil)
            (org-deadline-warning-days 36500)
            (org-agenda-entry-types '(:deadline))))
          ("v" "Videos to watch"
           tags "CATEGORY=\"ToWatch\"" nil)
          ;; TODO: consider only including those not under the appropriate level 1 heading
          ("f" "Bookmarks to file"
           ((todo "FILE")))
          ("u" "Upcoming next tasks"
           tags-todo "NEXT" nil)
          ("p" "Next actions of my projects"
           tags-todo "project" nil)
          ("i" "Ideas"
           ((todo "IDEA")))
          ("r" . "Review Toodledo Tasks")
          ("rt" "Review Toodledo Active tasks"
           ((todo "TOODLDO"))
           ((org-agenda-files '("~/Documents/OrgMode/Toodledo.org"))))
          ("rs" "Review Toodledo Someday tasks"
           ((todo "SOMEDAY"))
           ((org-agenda-files '("~/Documents/OrgMode/Toodledo.org"))))
          ))
  (setq org-agenda-time-grid
        '((daily today require-timed)
          #("----------------" 0 16
            (org-heading t))
          (800 1000 1200 1400 1600 1800 2000)))
  (defvar-local rfnash-hide-blocked-tasks nil "If non-nil, hide blocked tasks, else dim them.")
  (defun org-agenda-toggle-blocked-tasks ()
    "Toggle dimming/hiding blocked tasks."
    (interactive)
    (if rfnash-hide-blocked-tasks
        (progn (setq-local rfnash-hide-blocked-tasks nil)
               (org-agenda-dim-blocked-tasks))
      (progn (setq-local rfnash-hide-blocked-tasks t)
             (org-agenda-dim-blocked-tasks t))))

            ;;; org-agenda-redo resets the value of rfnash-hide-blocked-tasks,
            ;;; thus its value has to be saved before its called, and restored afterwards
  (defun rfnash-org-agenda-redo (&optional all)
    "Rebuild possibly ALL agenda view(s) in the current buffer, hiding blocked tasks"
    (interactive "P")
    (let ((old-rfnash-hide-blocked-tasks rfnash-hide-blocked-tasks))
      (org-agenda-redo all)
      (setq-local rfnash-hide-blocked-tasks old-rfnash-hide-blocked-tasks)
      (if rfnash-hide-blocked-tasks
          (org-agenda-dim-blocked-tasks t))))

  (bind-key "#" #'org-agenda-toggle-blocked-tasks org-agenda-mode-map)
  (bind-key "r" #'rfnash-org-agenda-redo org-agenda-mode-map))
#+end_src
** org-habit
#+begin_src emacs-lisp
  (use-package org-habit
    :config
    (setq org-habit-graph-column 65
          org-habit-following-days 1
          org-habit-graph-column 64
          org-habit-preceding-days 14
          org-habit-show-all-today nil
          org-habit-show-done-always-green t))
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package ido
    :ensure t
    :config
    (setq ido-enable-prefix nil
          ido-enable-flex-matching t
          ido-create-new-buffer 'always
          ido-use-filename-at-point 'guess
          ido-max-prospects 10
          ;; ido-save-directory-list-file (expand-file-name "ido.hist" prelude-savefile-dir)
          ido-default-file-method 'selected-window
          ido-auto-merge-work-directories-length -1)
    (setq ido-use-faces nil)              ; disable ido faces to see flx highlights
    (setq ido-everywhere t)
    (ido-mode +1))

  ;; smarter fuzzy matching for ido
  (use-package flx-ido
    :ensure t
    :config
    (flx-ido-mode +1))

  (use-package ido-ubiquitous
    :ensure t)

  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))
    ;; See https://github.com/bbatsov/prelude/pull/670 for a detailed
    ;; discussion of these options.
    (setq helm-split-window-in-side-p           t
          helm-buffers-fuzzy-matching           t
          helm-move-to-line-cycle-in-source     t
          helm-ff-search-library-in-sexp        t
          helm-ff-file-name-history-use-recentf t)

    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))

    (define-key helm-command-map (kbd "o")     'helm-occur)
    (define-key helm-command-map (kbd "g")     'helm-do-grep)
    (define-key helm-command-map (kbd "C-c w") 'helm-wikipedia-suggest)
    (define-key helm-command-map (kbd "SPC")   'helm-all-mark-rings)

    ;; (setq ido-ignore-buffers helm-boring-buffer-regexp-list)

    ;; Doesn't override ido for find files, but does for C-h f, so perfect
    (helm-mode 1)
    ;; I prefer heml ovel smex
    (global-set-key (kbd "M-x") 'helm-M-x)
    ;; Use helm for eshell completion
    ;; (add-hook 'eshell-mode-hook
    ;;           #'(lambda ()
    ;;               (define-key eshell-mode-map
    ;;                 [remap eshell-pcomplete]
    ;;                 'helm-esh-pcomplete)))
    ;; helm-occur
    (bind-key* "C-x c o" 'helm-occur)
    ;; helm-split-window-in-side-p doesn't play well with gnus
    ;;  (setq helm-split-window-in-side-p t)
    ;; Use ido for find-file and switch-to-buffer
    (add-to-list 'helm-completing-read-handlers-alist '(find-file . ido))
    (add-to-list 'helm-completing-read-handlers-alist '(switch-to-buffer . ido))
    ;; Increased idle delay from 0.1 to 0.5 (the value used by org-occur-goto) because of the long time it takes to search
    (setq helm-m-occur-idle-delay 0.5))

  (use-package helm-projectile
    :ensure t)


  ;; [[https://github.com/emacs-helm/helm-descbinds][helm-descbinds]]
  (use-package helm-descbinds :ensure t)
  (helm-descbinds-mode)
  ;; Various helm packages
  (use-package helm-orgcard :ensure t)
  (use-package helm-descbinds :ensure t)
  (use-package helm-backup :ensure t)
  (use-package helm-helm-commands :ensure t)
  (use-package ag :ensure t)
  (use-package helm-ag :ensure t)
  (use-package helm-ag-r :ensure t)
  (require 'ido)

  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 2)
    ;; invert the navigation direction if the the completion popup-isearch-match
    ;; is displayed on top (happens near the bottom of windows)
    (setq company-tooltip-flip-when-above t)

    (global-company-mode 1))
  (use-package yasnippet
         :ensure t
         :diminish yas-minor-mode
         :config
         (yas-global-mode 1))
  (use-package helm-c-yasnippet
    :ensure t)
#+end_src
* TODO Diminished Modes
  #+begin_src emacs-lisp
    (eval-after-load 'guru-mode '(diminish 'guru-mode))
    ;; (eval-after-load 'helm '(diminish 'helm-mode))
    (eval-after-load 'flycheck '(diminish 'flycheck-mode))
    (eval-after-load 'flyspell '(diminish 'flyspell-mode))
  #+end_src
* paradox
   #+begin_src emacs-lisp
     (use-package paradox
       :ensure t
       :config
       (setq paradox-automatically-star t))
   #+end_src
* Emacs Server
   Start the Emacs server if it isn't already running
   #+begin_src emacs-lisp
     (require 'server)
     (if (not (server-running-p server-name)) (server-start))
   #+end_src
